version: "3"
services:
  nginx:
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      default:
        ipv4_address: 10.0.0.10

#  php56:
#    build:
#      context: ./services/php56
#      args:
#        PHP_VERSION: php:${PHP56_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP56_EXTENSIONS}
#        TZ: "$TZ"
#    container_name: php56
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP56_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP56_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP56_LOG_DIR}:/var/log/php
#      - ${DATA_DIR}/composer:/tmp/composer
#    restart: always
#    depends_on:
#      - nginx
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  php72:
#    build:
#      context: ./services/php72
#      args:
#        PHP_VERSION: php:${PHP72_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
#        TZ: "$TZ"
#    container_name: php72
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP72_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP72_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP72_LOG_DIR}:/var/log/php
#    restart: always
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  php74:
#    build:
#      context: ./services/php74
#      args:
#        PHP_VERSION: php:${PHP_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
#        TZ: "$TZ"
#    container_name: php74
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP_LOG_DIR}:/var/log/php
#    restart: always
#    depends_on:
#      - nginx
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  php80:
#    build:
#      context: ./services/php80
#      args:
#        PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
#        TZ: "$TZ"
#    container_name: php80
#    ports:
#      - "18080-18089:18080-18089"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP80_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP80_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP80_LOG_DIR}:/var/log/php
#    restart: always
#    depends_on:
#      - nginx
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  php81:
#    build:
#      context: ./services/php81
#      args:
#        PHP_VERSION: php:${PHP81_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP81_EXTENSIONS}
#        TZ: "$TZ"
#    container_name: php81
#    ports:
#      - "18180-18189:18180-18189"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP81_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP81_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP81_LOG_DIR}:/var/log/php
#    restart: always
#    depends_on:
#      - nginx
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

  php82:
    build:
      context: ./services/php82
      args:
        DEBIAN_MIRROR_DOMAIN: ${DEBIAN_MIRROR_DOMAIN}
        PHP_VERSION: php:${PHP82_VERSION}-fpm
        PHP_EXTENSIONS: "$PHP82_EXTENSIONS"
        TZ: "$TZ"
    container_name: php82
    ports:
      - "18280-18289:18280-18289"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${PHP82_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP82_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf
      - ${PHP82_LOG_DIR}:/var/log/php
    restart: always
    depends_on:
      - nginx
    cap_add:
      - SYS_PTRACE
    networks:
      - default

#  hyperf:
#    build:
#      context: ./services/hyperf
#      args:
#        HYPERF_VERSION: hyperf/hyperf:${HYPERF_VERSION}
#        TZ: "$TZ"
#    container_name: hyperf
#    ports:
#      - '${HYPERF_HOST_PORT}:9501-9509'
#    volumes:
#      - ${HYPERF_WORK_DIR}:/hyperf-skeleton/:rw
#    restart: always
#    tty: true
#    networks:
#      - default

#  golang:
#    build:
#      context: ./services/golang
#      args:
#        GOLANG_VERSION: ${GOLANG_VERSION}
#    container_name: golang
#    restart: always
#    tty: true
#    ports:
#      - "${GOLANG_HOST_PORT}:9601-9609"
#    volumes:
#      - ${GOLANG_WORK_DIR}:/app/:rw
#    networks:
#      - default

#  java:
#    build:
#      context: ./services/java
#      args:
#        DEBIAN_MIRROR_DOMAIN: ${DEBIAN_MIRROR_DOMAIN}
#        JAVA_VERSION: ${JAVA_VERSION}
#    container_name: java
#    restart: always
#    tty: true
#    ports:
#      - "${JAVA_HOST_PORT}:9701-9709"
#    volumes:
#      - ${JAVA_WORK_DIR}:/app/:rw
#    networks:
#      - default

  mysql8:
    image: mysql:${MYSQL8_VERSION}
    container_name: mysql8
    ports:
      - "${MYSQL8_HOST_PORT}:3306"
    volumes:
      - ${MYSQL8_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql8:/var/lib/mysql/:rw
      - ${MYSQL8_LOG_DIR}:/var/log/mysql/:rw
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL8_ROOT_PASSWORD}"
      MYSQL_ROOT_HOST: "${MYSQL8_ROOT_HOST}"
      TZ: "$TZ"
    restart: always
    networks:
      - default

#  mysql5:
#    image: mysql:${MYSQL5_VERSION}
#    container_name: mysql5
#    ports:
#      - "${MYSQL5_HOST_PORT}:3306"
#    volumes:
#      - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
#      - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw
#      - ${MYSQL5_LOG_DIR}:/var/log/mysql/:rw
#    environment:
#      MYSQL_ROOT_PASSWORD: "${MYSQL5_ROOT_PASSWORD}"
#      MYSQL_ROOT_HOST: "${MYSQL5_ROOT_HOST}"
#      TZ: "$TZ"
#    restart: always
#    networks:
#      - default

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
      - ${DATA_DIR}/redis:/data/:rw
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf"]
    environment:
      TZ: "$TZ"
    networks:
      - default

#  memcached:
#    image: memcached:${MEMCACHED_VERSION}
#    container_name: memcached
#    ports:
#      - "${MEMCACHED_HOST_PORT}:11211"
#    environment:
#       MEMCACHED_CACHE_SIZE: "${MEMCACHED_CACHE_SIZE}"
#    networks:
#      - default

#  rabbitmq:
#    build:
#      context: ./services/rabbitmq
#      args:
#        RABBITMQ_VERSION: ${RABBITMQ_VERSION}
#        RABBITMQ_PLUGINS: ${RABBITMQ_PLUGINS}
#    container_name: rabbitmq
#    restart: always
#    ports:
#      - "${RABBITMQ_HOST_PORT_C}:5672"
#      - "${RABBITMQ_HOST_PORT_S}:15672"
#    environment:
#      TZ: "$TZ"
#      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
#      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
#    networks:
#      - default

#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin:latest
#    container_name: phpmyadmin
#    ports:
#      - "${PHPMYADMIN_HOST_PORT}:80"
#    volumes:
#      - ${PHPMYADMIN_USER_CONF_FILE}:/etc/phpmyadmin/config.user.inc.php:ro
#      - ${PHPMYADMIN_PHP_CONF_FILE}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini:ro
#    environment:
#      - PMA_HOST=mysql8
#      - PMA_PORT=3306
#      - TZ=$TZ
#    restart: always
#    networks:
#      - default
#
#  phpredisadmin:
#    image: erikdubbelboer/phpredisadmin:latest
#    container_name: phpredisadmin
#    ports:
#      - "${REDISMYADMIN_HOST_PORT}:80"
#    environment:
#      - REDIS_1_HOST=redis
#      - REDIS_1_PORT=6379
#      - TZ=$TZ
#    restart: always
#    networks:
#      - default

#  mongodb:
#    image: mongo:${MONGODB_VERSION}
#    container_name: mongodb
#    environment:
#        MONGO_INITDB_ROOT_USERNAME: "${MONGODB_INITDB_ROOT_USERNAME}"
#        MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_INITDB_ROOT_PASSWORD}"
#        TZ: "$TZ"
#    volumes:
#      - ${DATA_DIR}/mongo:/data/db:rw
#      - ${DATA_DIR}/mongo_key:/mongo:rw
#    ports:
#       - "${MONGODB_HOST_PORT}:27017"
#    restart: always
#    networks:
#       - default
#    command:
#       --auth

#  adminmongo:
#    image: mrvautin/adminmongo
#    container_name: adminmongo
#    ports:
#      - "${ADMINMONGO_HOST_PORT}:1234"
#    environment:
#      - HOST=0.0.0.0
#      - DB_HOST=mongodb
#      - DB_PORT=27017
#    restart: always
#    networks:
#      - default

#  elasticsearch:
#    build:
#      context: ./services/elasticsearch
#      args:
#        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
#        ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}
#    container_name: elasticsearch
#    environment:
#      - TZ=$TZ
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    volumes:
#      - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data
#      - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
#      - ${ELASTICSEARCH_JVM_CONF_FILE}:/usr/share/elasticsearch/config/jvm.options
#      - ${ELASTICSEARCH_LOG4J2_CONF_FILE}:/usr/share/elasticsearch/config/log4j2.properties
#    hostname: elasticsearch
#    restart: always
#    ports:
#      - "${ELASTICSEARCH_HOST_PORT_C}:9200"
#      - "${ELASTICSEARCH_HOST_PORT_S}:9300"

#  kibana:
#    image: kibana:${KIBANA_VERSION}
#    container_name: kibana
#    environment:
#      TZ: "$TZ"
#      elasticsearch.hosts: http://elasticsearch:9200
#      I18N_LOCALE: "${KIBANA_I18N_LOCALE}"
#    hostname: kibana
#    depends_on:
#      - elasticsearch
#    restart: always
#    ports:
#      - "${KIBANA_HOST}:5601"

#  logstash:
#    image: logstash:${LOGSTASH_VERSION}
#    container_name: logstash
#    hostname: logstash
#    restart: always
#    depends_on:
#      - elasticsearch
#    environment:
#      TZ: "$TZ"
#    ports:
#      - "${LOGSTASH_HOST_PORT_C}:9600"
#      - "${LOGSTASH_HOST_PORT_S}:5044"

#  node:
#    build:
#      context: ./services/node
#      args:
#        NODE_VERSION: ${NODE_VERSION}
#    container_name: node
#    restart: always
#    tty: true
#    environment:
#      - NODE_ENV=production
#    volumes:
#      - ${NODE_WORK_DIR}:/app/:rw
#      - ${SOURCE_DIR}:/www/:rw
#    expose:
#      - "8081"
#    networks:
#      - default


#  supervisor:
#    build:
#      context: ./services/supervisor
#      args:
#        ALPINE_VERSION: alpine:${ALPINE_VERSION}
#        TZ: "$TZ"
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#    container_name: supervisor
#    ports:
#      - "${SUPERVISOR_HOST_PORT_C}:9001"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${SUPERVISOR_LOG}:/var/log/supervisor/:rw
#      - ${SUPERVISOR_CONFIG}:/etc/supervisor/conf.d/:rw
#      - ${SUPERVISOR_CONF_FILE}:/etc/supervisor/supervisord.conf:ro
#    command:
#      - /bin/sh
#      - -c
#      - |
#        supervisord -n -c /etc/supervisor/supervisord.conf
#    restart: always
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/24
